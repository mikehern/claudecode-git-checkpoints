# "Let Claude Decide" Feature Specification

## Overview
Implement the "Let Claude Decide" option in the vibepoint creation flow, leveraging the Claude Code CLI to generate AI-powered commit message suggestions.

## User Flow

### Entry Point
- User navigates to "Create vibepoint" screen
- Selects option "3 Let Claude decide" 
- System transitions to loading screen

### Loading State
**Screen Layout:**
```
┌─────────────────────────────────────────────────────────────────────┐
│                                                                     │
│ * Analyzing your last sent message and file changes                 │
│                                                                     │
└─────────────────────────────────────────────────────────────────────┘
```

**Animation:**
- Text displays in orange
- Characters animate from orange to white, left to right, rapidly and repeatedly
- Animation continues until API response received
- Uses same looping pattern as Claude Code interface

### Results State
**Screen Layout:**
```
┌─────────────────────────────────────────────────────────────────────┐
│ Claude's Suggestions                                                │
│                                                                     │
│ > 1 Vibecoder: [Natural language commit message]                   │
│   2 Prototyper: [Conventional commit format message]               │
│                                                                     │
│ Press 1-2 to select • Enter to confirm • Esc to go back           │
└─────────────────────────────────────────────────────────────────────┘
```

**Interaction:**
- Arrow keys or number keys (1-2) for selection
- Enter to confirm selection and create commit
- Esc to return to create vibepoint menu

## Technical Implementation

### Context Gathering
The system will collect and send to Claude:
1. **Git diff**: `git diff --staged` output of current changes
2. **Last Claude input**: Most recent user message from Claude Code conversation history
3. **File changes summary**: Categorized list of added/modified/removed files
4. **Code snippets**: Key sections of modified code for semantic understanding (if needed)

### AI Prompt Strategy
Generate two distinct commit message styles:

**Vibecoder Style:**
- Natural, conversational language
- Connects user intent to implementation
- Example: "Added dark mode toggle to settings page"

**Prototyper Style:**  
- Conventional commits format (feat:, fix:, refactor:, etc.)
- Technical, precise descriptions
- Example: "feat: add dark mode toggle component with context provider"

### Error Handling
- API timeout/failure: Fall back to custom input flow
- No meaningful changes detected: Suggest generic message
- Network errors: Show error message with retry option

## Step 4 Implementation Details

### State Management Requirements

**New State Variables:**
```javascript
const [showClaudeDecide, setShowClaudeDecide] = useState(false);
const [claudeDecideState, setClaudeDecideState] = useState('loading'); // 'loading' | 'suggestions' | 'error'
const [claudeSuggestions, setClaudeSuggestions] = useState([]);
const [claudeDecideError, setClaudeDecideError] = useState(null);
const [loadingAnimationText, setLoadingAnimationText] = useState('* Analyzing your last sent message and file changes');
const [loadingAnimationProgress, setLoadingAnimationProgress] = useState(0);
const [loadingAnimationPhase, setLoadingAnimationPhase] = useState(1); // 1 = orange->white, 2 = white->orange
const [selectedSuggestionIndex, setSelectedSuggestionIndex] = useState(0); // For suggestions navigation
```

### Context Gathering System

**Git Diff Helper Function:**
```javascript
const getGitDiff = async () => {
  try {
    const git = simpleGit(process.cwd());
    const status = await git.status();
    
    if (status.staged.length > 0) {
      // Get staged changes (what will be committed)
      return await git.diff(['--staged']);
    } else {
      // Get all unstaged changes
      return await git.diff();
    }
  } catch (error) {
    console.error('Failed to get git diff:', error);
    return '';
  }
};
```

**Primary Context Collection Function:**
```javascript
const gatherClaudeContext = async () => {
  try {
    // 1. Get git diff of current changes
    const diff = await getGitDiff();
    
    // 2. Current file changes (already have this)
    const fileChanges = await getCurrentFileChanges();
    
    // 3. Last Claude input (already have this)
    const lastInput = lastClaudeInput?.text || '';
    
    // 4. Recent commit context for patterns
    const recentCommits = commits.slice(0, 3).map(c => c.text);
    
    return {
      diff,
      fileChanges,
      lastInput,
      recentCommits
    };
  } catch (error) {
    console.error('Context gathering failed:', error);
    throw new Error('Failed to analyze project changes');
  }
};
```

### Loading Animation System

**Animation Logic (Following Existing Patterns):**
```javascript
// useEffect for loading animation
useEffect(() => {
  if (showClaudeDecide && claudeDecideState === 'loading') {
    const totalChars = loadingAnimationText.length;
    const interval = setInterval(() => {
      setLoadingAnimationProgress((prev) => {
        const next = prev + 1;
        if (next >= totalChars) {
          // Cycle complete, reverse direction
          if (loadingAnimationPhase === 1) {
            setTimeout(() => {
              setLoadingAnimationPhase(2);
              setLoadingAnimationProgress(0);
            }, 100); // Brief pause
          } else {
            setTimeout(() => {
              setLoadingAnimationPhase(1);
              setLoadingAnimationProgress(0);
            }, 100);
          }
          return totalChars;
        }
        return next;
      });
    }, 30); // 30ms per character for smooth animation

    return () => clearInterval(interval);
  }
}, [showClaudeDecide, claudeDecideState, loadingAnimationPhase, loadingAnimationText]);
```

**Render Loading Animation:**
```javascript
const renderLoadingAnimation = () => {
  const animatedText = loadingAnimationText
    .split('')
    .map((char, charIndex) => {
      if (loadingAnimationPhase === 1) {
        // Phase 1: Orange → White (left to right)
        if (charIndex < loadingAnimationProgress) {
          return char; // white (default)
        } else {
          return chalk.hex('#FFA500')(char); // orange
        }
      } else {
        // Phase 2: White → Orange (left to right)
        if (charIndex < loadingAnimationProgress) {
          return chalk.hex('#FFA500')(char); // orange
        } else {
          return char; // white
        }
      }
    })
    .join('');
  
  return animatedText;
};
```

**Loading Screen Render Function:**
```javascript
const renderClaudeDecideLoadingView = () => {
  return React.createElement(
    Box,
    { flexDirection: "column", padding: 1 },
    React.createElement(
      Box,
      { borderStyle: "single", padding: 1 },
      React.createElement(
        Box,
        { flexDirection: "column" },
        React.createElement(Text, null, " "),
        React.createElement(
          Text,
          { wrap: "wrap" },
          renderLoadingAnimation()
        ),
        React.createElement(Text, null, " ")
      )
    )
  );
};
```

### CLI Integration Architecture

**Claude CLI Call Function:**
```javascript
import { execSync } from 'child_process';

const generateCommitSuggestions = async (context) => {
  const prompt = `
<task>
Generate two distinct commit message suggestions for the changes about to be committed.
</task>

<context>
<user_intent>
${context.lastInput || 'No recent user message found'}
</user_intent>

<file_changes>
Added files: ${context.fileChanges.added.join(', ') || 'none'}
Modified files: ${context.fileChanges.modified.join(', ') || 'none'}  
Removed files: ${context.fileChanges.removed.join(', ') || 'none'}
</file_changes>

<code_diff>
${context.diff ? context.diff.slice(0, 1000) : 'No diff available'}
${context.diff && context.diff.length > 1000 ? '\\n[...truncated...]' : ''}
</code_diff>

<recent_commits>
Recent commit history for context:
${context.recentCommits.length > 0 ? context.recentCommits.map(c => \`• \${c}\`).join('\\n') : '• No recent commits'}
</recent_commits>
</context>

<instructions>
Based on the user's intent and the actual code changes, create two commit messages:

<vibecoder_style>
Natural, conversational language that connects the user's request to what was implemented.
Example: "Added user authentication to protect dashboard access"
</vibecoder_style>

<prototyper_style>  
Conventional commits format with technical precision.
Use: feat|fix|docs|refactor|test|chore|style: brief technical description
Example: "feat: implement JWT-based authentication middleware"
</prototyper_style>
</instructions>

<output_format>
Return valid JSON only:
{
  "vibecoder": "your natural language message",
  "prototyper": "your conventional commit message"
}
</output_format>
`;

  try {
    // Use claude CLI with -p flag and JSON output
    const result = execSync(
      \`echo \${JSON.stringify(prompt)} | claude -p --output-format json --max-turns 1\`,
      { 
        encoding: 'utf8',
        timeout: 30000, // 30 second timeout
        cwd: process.cwd() // Run in current directory
      }
    );

    // Parse the JSON response
    const response = JSON.parse(result.trim());
    
    return [
      { type: 'vibecoder', message: response.vibecoder },
      { type: 'prototyper', message: response.prototyper }
    ];
    
  } catch (error) {
    console.error('Claude CLI call failed:', error);
    
    // Better error messages based on CLI errors
    if (error.message.includes('command not found')) {
      throw new Error('Claude Code CLI not installed. Install with: npm install -g @anthropic-ai/claude-code');
    } else if (error.message.includes('ANTHROPIC_API_KEY')) {
      throw new Error('Claude Code not authenticated. Run: claude auth');
    } else if (error.message.includes('timeout')) {
      throw new Error('Claude API request timed out');
    } else {
      throw new Error(\`Claude CLI error: \${error.message}\`);
    }
  }
};
```

**Integration with Existing Flow:**
```javascript
// In the useInput handler, modify the Option 3 case:
} else if (createVibepointSelectedIndex === 2) {
  // Navigate to Claude decide loading
  playAnimationSound();
  setShowCreateVibepoint(false);
  setShowClaudeDecide(true);
  setClaudeDecideState('loading');
  setClaudeDecideError(null);
  
  // Start the context gathering and CLI call
  handleClaudeDecideFlow();
}

const handleClaudeDecideFlow = async () => {
  try {
    // Gather context
    const context = await gatherClaudeContext();
    
    // Call Claude CLI
    const suggestions = await generateCommitSuggestions(context);
    
    // Transition to suggestions view
    setClaudeSuggestions(suggestions);
    setClaudeDecideState('suggestions');
  } catch (error) {
    // CLI-specific error handling
    if (error.message.includes('not installed')) {
      setClaudeDecideError('Claude Code CLI not found. Please install Claude Code first.');
    } else if (error.message.includes('not authenticated')) {
      setClaudeDecideError('Claude Code not authenticated. Run "claude auth" first.');
    } else if (error.message.includes('timeout')) {
      setClaudeDecideError('Request timed out. Please try again.');
    } else {
      setClaudeDecideError(\`Error: \${error.message}\`);
    }
    setClaudeDecideState('error');
  }
};
```

### Error Handling & Fallback Flows

**Additional CLI Error Categories:**
```javascript
// Additional error handling patterns for CLI integration
const getCLIErrorMessage = (error) => {
  if (error.message.includes('command not found')) {
    return 'Claude Code CLI not installed. Install with: npm install -g @anthropic-ai/claude-code';
  } else if (error.message.includes('ANTHROPIC_API_KEY') || error.message.includes('authentication')) {
    return 'Claude Code not authenticated. Run "claude auth" first.';
  } else if (error.message.includes('timeout')) {
    return 'Claude request timed out. Please try again.';
  } else if (error.message.includes('JSON')) {
    return 'Invalid response from Claude. Please try again.';
  } else if (error.message.includes('rate limit')) {
    return 'Rate limited. Please wait a moment and try again.';
  } else {
    return \`CLI error: \${error.message}\`;
  }
};
```

**Error UI with Fallback Options:**
```javascript
const renderClaudeDecideErrorView = () => {
  return React.createElement(
    Box,
    { flexDirection: "column", padding: 1 },
    React.createElement(
      Box,
      { borderStyle: "single", padding: 1 },
      React.createElement(
        Box,
        { flexDirection: "column" },
        React.createElement(Text, { bold: true, color: "red" }, "Claude Decide Failed"),
        React.createElement(Text, null, " "),
        React.createElement(Text, null, claudeDecideError),
        React.createElement(Text, null, " "),
        React.createElement(Text, { color: "yellow" }, "Options:"),
        React.createElement(Text, null, "• Press 'r' to retry"),
        React.createElement(Text, null, "• Press 'c' to write custom message instead"),
        React.createElement(Text, { color: "gray" }, "• Press 'Esc' to go back")
      )
    )
  );
};
```

**Original Error State Keyboard Handling (replaced by enhanced version above):**
```javascript
// Note: This basic error handling is replaced by the enhanced version above
// which handles both Claude API errors and commit errors differently
```
```

### Complete End-to-End Integration

**Claude Decide Vibepoint Creation Function:**
```javascript
const createClaudeDecideVibepoint = async (message) => {
  try {
    setClaudeDecideError(null);
    const git = simpleGit(process.cwd());

    // Stage all changes
    await git.add(".");

    // Commit with the selected Claude message
    await git.commit(message);

    // Clean up Claude Decide state
    setShowClaudeDecide(false);
    setClaudeDecideState('loading'); // Reset for next time
    setClaudeSuggestions([]);
    setClaudeDecideError(null);
    setSelectedSuggestionIndex(0);

    // Refresh the commit list and return to main page
    loadCommits();

    // Start success animation for the newly created commit (index 1 because "Create vibepoint" is at 0)
    setSuccessAnimatingIndex(1);
    setSuccessAnimationProgress(0);

    // Play vibepoint success sound
    playVibepointSound();
  } catch (error) {
    console.error("Failed to create Claude decide vibepoint:", error.message);
    
    // Stay in Claude Decide flow for error handling
    setClaudeDecideError(`Failed to create vibepoint: ${error.message}`);
    setClaudeDecideState('error');
  }
};
```

**Enhanced Error Handling for Claude Decide Flow:**
```javascript
// Update the existing renderClaudeDecideErrorView to handle commit errors
const renderClaudeDecideErrorView = () => {
  const isCommitError = claudeDecideError?.includes('Failed to create vibepoint');
  
  return React.createElement(
    Box,
    { flexDirection: "column", padding: 1 },
    React.createElement(
      Box,
      { borderStyle: "single", padding: 1 },
      React.createElement(
        Box,
        { flexDirection: "column" },
        React.createElement(
          Text, 
          { bold: true, color: "red" }, 
          isCommitError ? "Vibepoint Creation Failed" : "Claude Decide Failed"
        ),
        React.createElement(Text, null, " "),
        React.createElement(Text, null, claudeDecideError),
        React.createElement(Text, null, " "),
        React.createElement(Text, { color: "yellow" }, "Options:"),
        
        // Different options based on error type
        ...(isCommitError ? [
          React.createElement(Text, null, "• Press 'r' to retry creating vibepoint"),
          React.createElement(Text, null, "• Press 'b' to go back to suggestions"),
          React.createElement(Text, null, "• Press 'c' to write custom message instead"),
        ] : [
          React.createElement(Text, null, "• Press 'r' to retry Claude analysis"),
          React.createElement(Text, null, "• Press 'c' to write custom message instead"),
        ]),
        
        React.createElement(Text, { color: "gray" }, "• Press 'Esc' to go back")
      )
    )
  );
};
```

**Enhanced Error State Keyboard Handling:**
```javascript
// Update the error state handling in useInput
if (showClaudeDecide && claudeDecideState === 'error') {
  const isCommitError = claudeDecideError?.includes('Failed to create vibepoint');
  
  if (input === 'r') {
    if (isCommitError) {
      // Retry the commit with the same message
      const lastSelectedMessage = claudeSuggestions[selectedSuggestionIndex]?.message;
      if (lastSelectedMessage) {
        setClaudeDecideError(null);
        createClaudeDecideVibepoint(lastSelectedMessage);
      }
    } else {
      // Retry the Claude analysis flow
      setClaudeDecideState('loading');
      setClaudeDecideError(null);
      handleClaudeDecideFlow();
    }
    return;
  }
  
  if (input === 'b' && isCommitError) {
    // Go back to suggestions screen
    setClaudeDecideError(null);
    setClaudeDecideState('suggestions');
    return;
  }
  
  if (input === 'c') {
    // Fallback to custom input
    setShowClaudeDecide(false);
    setClaudeDecideState('loading'); // Reset state
    setClaudeSuggestions([]);
    setClaudeDecideError(null);
    setSelectedSuggestionIndex(0);
    setShowCustomLabel(true);
    return;
  }
  
  if (key.escape) {
    // Back to create vibepoint menu
    setShowClaudeDecide(false);
    setClaudeDecideState('loading'); // Reset state
    setClaudeSuggestions([]);
    setClaudeDecideError(null);
    setSelectedSuggestionIndex(0);
    setShowCreateVibepoint(true);
    return;
  }
  
  return;
}
```

### UI Render Functions

**Suggestions Screen Render Function:**
```javascript
const renderClaudeDecideSuggestionsView = () => {
  return React.createElement(
    Box,
    { flexDirection: "column", padding: 1 },
    React.createElement(
      Box,
      { borderStyle: "single", padding: 1 },
      React.createElement(
        Box,
        { flexDirection: "column" },
        React.createElement(
          Text,
          { bold: true, color: "blueBright" },
          "Claude's Suggestions"
        ),
        React.createElement(Text, null, " "),
        
        ...claudeSuggestions.map((suggestion, index) => {
          const isSelected = index === selectedSuggestionIndex;
          const indicator = isSelected ? ">" : " ";
          const label = suggestion.type === 'vibecoder' ? 'Vibecoder' : 'Prototyper';
          
          return React.createElement(
            Text,
            { 
              key: index,
              color: isSelected ? "yellow" : "white",
              wrap: "wrap"
            },
            `${indicator} ${index + 1} ${label}: ${suggestion.message}`
          );
        }),
        
        React.createElement(Text, null, " "),
        React.createElement(
          Text,
          { color: "gray" },
          "Press 1-2 to select • Enter to confirm • Esc to go back"
        )
      )
    )
  );
};
```

### Keyboard Navigation

**Complete useInput Handler Extensions:**
```javascript
// Add to existing useInput handler, before main page navigation

if (showClaudeDecide && claudeDecideState === 'loading') {
  // Loading state - only allow escape
  if (key.escape) {
    playNextSound();
    setShowClaudeDecide(false);
    setShowCreateVibepoint(true);
    return;
  }
  return; // Block all other input during loading
}

if (showClaudeDecide && claudeDecideState === 'suggestions') {
  // Suggestions screen navigation
  if (key.escape) {
    playNextSound();
    setShowClaudeDecide(false);
    setShowCreateVibepoint(true);
    return;
  }
  
  if (key.upArrow) {
    setSelectedSuggestionIndex((prev) => {
      const newIndex = Math.max(0, prev - 1);
      if (newIndex !== prev) playMenuSound();
      return newIndex;
    });
    return;
  }
  
  if (key.downArrow) {
    setSelectedSuggestionIndex((prev) => {
      const newIndex = Math.min(claudeSuggestions.length - 1, prev + 1);
      if (newIndex !== prev) playMenuSound();
      return newIndex;
    });
    return;
  }
  
  if (key.return) {
    const selectedMessage = claudeSuggestions[selectedSuggestionIndex].message;
    playAnimationSound();
    
    // Create commit with selected message using Claude Decide flow
    createClaudeDecideVibepoint(selectedMessage);
    return;
  }
  
  // Number key selection (1-2)
  if (input === "1" && claudeSuggestions.length >= 1) {
    setSelectedSuggestionIndex(0);
    const selectedMessage = claudeSuggestions[0].message;
    playAnimationSound();
    createClaudeDecideVibepoint(selectedMessage);
    return;
  }
  
  if (input === "2" && claudeSuggestions.length >= 2) {
    setSelectedSuggestionIndex(1);
    const selectedMessage = claudeSuggestions[1].message;
    playAnimationSound();
    createClaudeDecideVibepoint(selectedMessage);
    return;
  }
  
  return;
}

if (showClaudeDecide && claudeDecideState === 'error') {
  // Error state handling (already defined above)
  if (input === 'r') {
    setClaudeDecideState('loading');
    setClaudeDecideError(null);
    handleClaudeDecideFlow();
    return;
  }
  
  if (input === 'c') {
    setShowClaudeDecide(false);
    setShowCustomLabel(true);
    return;
  }
  
  if (key.escape) {
    setShowClaudeDecide(false);
    setShowCreateVibepoint(true);
    return;
  }
  
  return;
}
```

### Main Render Logic Integration

**Add to Main Component Render Logic:**
```javascript
// Add before existing conditional renders (showCustomLabel, showVibepointDetails, etc.)

if (showClaudeDecide) {
  if (claudeDecideState === 'loading') {
    return renderClaudeDecideLoadingView();
  } else if (claudeDecideState === 'suggestions') {
    return renderClaudeDecideSuggestionsView();  
  } else if (claudeDecideState === 'error') {
    return renderClaudeDecideErrorView();
  }
}

// Then continue with existing conditional renders...
if (showCustomLabel) {
  return renderCustomLabelView();
}
// ... rest of existing logic
```

## Integration Points

### Claude Code CLI Integration
- Uses `claude -p --output-format json` for commit message generation
- Leverages user's existing Claude Code installation and authentication
- No additional dependencies required in package.json
- Handles CLI-specific errors (installation, authentication, timeouts)

### Existing Codebase Integration
- Add new state management for loading and suggestions
- Extend `useInput` handler for new screen navigation
- Integrate with existing `createCustomVibepoint` flow for final commit
- Reuse existing git integration patterns from `simpleGit`

### UI Components
- New loading screen component with animation
- New suggestions selection component  
- Reuse existing modal/navigation patterns
- CLI-specific error messages and fallback flows

### Advantages of CLI Approach
- No SDK dependency or version management
- Uses user's existing Claude Code setup and preferences
- Built-in JSON formatting with `--output-format json`
- Familiar authentication flow (claude auth)
- Respects user's API quotas and rate limiting

